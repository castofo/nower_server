swagger: '2.0'
info:
  title: Nower REST API
  description: Specification for exposed Nower services.
  version: "1.0"
schemes:
  - http
basePath: /v1
produces:
  - application/json
paths:
  /promos:
    get:
      summary: Fetches all Promos.
      description: |
        Returns a list of available promos. The reponse includes the display
        name and other details about each promo.
      tags:
        - promos
      responses:
        200:
          description: An array of promos.
          schema:
            type: array
            items:
              $ref: '#/definitions/Promo'
        401:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Creates a new Promo.
      description: |
        Given a set of properties, creates and returns a promo.
      tags:
        - promos
      parameters:
        - in: body
          name: body
          description: Promo with properties to be created with.
          required: true
          schema:
            $ref: "#/definitions/PromoParams"
      responses:
        201:
          description: Successfully created promo.
          schema:
            $ref: '#/definitions/Promo'
        401:
          description: Unauthorized error.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: Promo couldn't be created with the given properties.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /promos/{id}:
    patch:
      summary: Updates a Promo.
      description: |
        With a promo id, updates on it the given properties.
      tags:
        - promos
      parameters:
        - name: id
          in: path
          description: The promo identifier
          type: string
          required: true
        - in: body
          name: body
          description: Promo properties to be updated.
          required: true
          schema:
            $ref: "#/definitions/PromoParams"
      responses:
        200:
          description: Successfully updated promo.
          schema:
            $ref: '#/definitions/Promo'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The given promo was not found.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: Promo couldn't be updated with the given properties.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deletes a Promo.
      description: |
        Deletes the specified promo, by id.
      tags:
        - promos
      parameters:
        - name: id
          in: path
          description: Identifier of the promo to be deleted.
          type: string
          required: true
      responses:
        200:
          description: Successfully deleted promo.
        401:
          description: Unauthorized error.
          schema:
            $ref: '#/definitions/Error'
        404:
          description: The given promo was not found.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /auths/index:
    get:
      summary: Fetches all application users (Development only).
      description: |
        Returns a list of all registered application users.
      tags:
        - auths
      responses:
        200:
          description: An array of users.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /auths/login:
    post:
      summary: Logs in an application user.
      description: |
        Given an user email and password, it authenticates the user with the given credentials,
        returning an access token for subsequent requests.
      tags:
        - auths
      parameters:
        - in: body
          name: body
          description: User credentials to authenticate.
          required: true
          schema:
            $ref: "#/definitions/LoginParams"
      responses:
        200:
          description: Successfully logged in.
          schema:
            $ref: '#/definitions/UserLoginResponse'
        401:
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /auths/register:
    post:
      summary: Registers in an application user.
      description: |
        Given a set of parameters, it creates an application user, returning the successfully
        created user.
      tags:
        - auths
      parameters:
        - in: body
          name: body
          description: User information to be registered with.
          required: true
          schema:
            $ref: "#/definitions/UserRegisterParams"
      responses:
        201:
          description: Successfully registered.
          schema:
            $ref: '#/definitions/User'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized to register an user.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: Some field is unprocessable.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /admins/index:
    get:
      summary: Fetches all web admins.
      description: |
        Returns a list of all registered web admins.
      tags:
        - admins
      responses:
        200:
          description: An array of admins.
          schema:
            type: array
            items:
              $ref: '#/definitions/Admin'
        401:
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /admins/login:
    post:
      summary: Logs in a web admin.
      description: |
        Given an admin email and password, it authenticates the admin with the given credentials,
        returning an access token for subsequent requests.
      tags:
        - admins
      parameters:
        - in: body
          name: body
          description: Admins credentials to authenticate.
          required: true
          schema:
            $ref: "#/definitions/LoginParams"
      responses:
        200:
          description: Successfully logged in.
          schema:
            $ref: '#/definitions/AdminLoginResponse'
        401:
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /admins/register:
    post:
      summary: Registers in a web admin.
      description: |
        Given a set of parameters, it creates a web admin, returning the successfully
        created admin.
      tags:
        - admins
      parameters:
        - in: body
          name: body
          description: Admin information to be registered with.
          required: true
          schema:
            $ref: "#/definitions/AdminRegisterParams"
      responses:
        201:
          description: Successfully registered.
          schema:
            $ref: '#/definitions/Admin'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized to register an admin.
          schema:
            $ref: '#/definitions/Error'
        422:
          description: Some field is unprocessable.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /branches:
    get:
      summary: Fetches all branches.
      description: |
        Returns a list of all created branches.
      tags:
        - branches
      responses:
        200:
          description: An array of branches.
          schema:
            type: array
            items:
              $ref: '#/definitions/Branch'
        401:
          description: Authentication failed.
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'

tags:
  - name: promos
    description: Promos management
  - name: auths
    description: Authorizations management
  - name: admins
    description: Admins management
  - name: branches
    description: Branches management

definitions:
  Promo:
    type: object
    required:
      - id
      - name
      - description
      - terms
      - stock
      - price
      - start_date
      - end_date
      - created_at
      - updated_at
    properties:
      id:
        type: string
        description: Unique identifier representing an specific promo.
      name:
        type: string
        description: Display name for the promo.
      description:
        type: string
        description: A description of the promo, it may contain specific
          information about it.
      terms:
        type: string
        description: Terms and conditions related with the promo.
      stock:
        type: integer
        description: Indicates how many items of the promo are available.
      price:
        type: number
        description: Indicates what is the sale price for an item related with
          the promo.
      start_date:
        type: string
        description: Date and time when the promo starts to run.
      end_date:
        type: string
        description: Date and time when the promo finishes.
      created_at:
        type: string
        description: Date and time when this instance was created.
      updated_at:
        type: string
        description: Date and time when this instance was last modified.

  PromoParams:
    type: object
    required:
      - name
      - description
      - terms
    properties:
      name:
        type: string
        description: Display name for the promo.
      description:
        type: string
        description: A description of the promo, it may contain specific
          information about it.
      terms:
        type: string
        description: Terms and conditions related with the promo.
      stock:
        type: integer
        description: Indicates how many items of the promo are available.
      price:
        type: number
        description: Indicates what is the sale price for an item related with
          the promo.
      start_date:
        type: string
        description: Date and time when the promo starts to run.
      end_date:
        type: string
        description: Date and time when the promo finishes.

  User:
    type: object
    required:
      - id
      - first_name
      - last_name
      - email
      - birthday
      - gender
      - created_at
      - updated_at
    properties:
      id:
        type: string
        description: Unique identifier representing an specific user.
      first_name:
        type: string
        description: First name of the user.
      last_name:
        type: string
        description: Last name of the user.
      email:
        type: string
        description: Email address of the user.
      birthday:
        type: string
        description: "Day of birth of the user. **(Format: YYYY-MM-dd)**"
      gender:
        type: string
        description: Gender of the user.
        enum:
          - M
          - F
      created_at:
        type: string
        description: Date and time when the user was created.
      updated_at:
        type: string
        description: Date and time when the user was lastly modified.

  LoginParams:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: Email address of the user or user to be authenticated.
      password:
        type: string
        description: Password associated with the given email address.

  UserLoginResponse:
    type: object
    required:
      - user_id
      - token
    properties:
      user_id:
        type: string
        description: Identifier of the authenticated user.
      token:
        type: string
        description: Authorization token for subsequent requests.

  UserRegisterParams:
    type: object
    required:
      - first_name
      - last_name
      - email
      - password
    properties:
      first_name:
        type: string
        description: First given name of the user.
      last_name:
        type: string
        description: Last given name of the user.
      email:
        type: string
        description: "Email address to register the user with. **(Used to login)**"
      password:
        type: string
        format: password
        description: Password to register the user with.
      birthday:
        type: string
        description: Date of birth of the user.
      gender:
        type: string
        description: Gender of the user.
        enum:
          - M
          - F

  Admin:
    type: object
    required:
      - id
      - first_name
      - last_name
      - email
      - admin_type
      - privileges
      - activated_at
      - created_at
      - updated_at
    properties:
      id:
        type: string
        description: Unique identifier representing an specific admin.
      first_name:
        type: string
        description: First name of the admin.
      last_name:
        type: string
        description: Last name of the admin.
      email:
        type: string
        description: Email address of the admin.
      admin_type:
        type: string
        description: Type of administrator.
        enum:
          - branch_admin
          - store_admin
      privileges:
        type: array
        description: Privileges of the admin.
        items:
          type: string
        enum:
          - create_promo
          - update_promo
          - delete_promo
          - update_branch
          - invite_to_branch
      activated_at:
        type: string
        description: Date and time when the admin was activated via email confirmation.
          `null` if he/she hasn't confirmed the email yet.
      created_at:
        type: string
        description: Date and time when the admin was created.
      updated_at:
        type: string
        description: Date and time when the admin was lastly modified.

  AdminLoginResponse:
    type: object
    required:
      - admin_id
      - token
    properties:
      admin_id:
        type: string
        description: Identifier of the authenticated admin.
      token:
        type: string
        description: Authorization token for subsequent requests.

  AdminRegisterParams:
    type: object
    required:
      - first_name
      - last_name
      - email
      - password
    properties:
      first_name:
        type: string
        description: First given name of the admin.
      last_name:
        type: string
        description: Last given name of the admin.
      email:
        type: string
        description: "Email address to register the admin with. **(Used to login)**"
      password:
        type: string
        format: password
        description: Password to register the admin with.
      privileges:
        type: array
        description: Array of privileges the admin to be created with.
        items:
          type: string
        enum:
          - create_promo
          - update_promo
          - delete_promo
          - update_branch
          - invite_to_branch

  Branch:
    type: object
    required:
      - id
      - latitude
      - longitude
      - address
      - default_contact_info
      - created_at
      - updated_at
    properties:
      id:
        type: string
        description: Unique identifier representing an specific branch.
      latitude:
        type: string
        description: Latitude of the branch.
      longitude:
        type: string
        description: Longitude of the branch.
      address:
        type: string
        description: Street address of the branch.
      default_contact_info:
        type: boolean
        description: Whether to use the store contact information for this branch or not.
      created_at:
        type: string
        description: Date and time when the branch was created.
      updated_at:
        type: string
        description: Date and time when the branch was lastly modified.

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
