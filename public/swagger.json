{
  "swagger": "2.0",
  "info": {
    "title": "Nower REST API",
    "description": "Specification for exposed Nower services",
    "version": "1.0"
  },
  "schemes": [
    "http"
  ],
  "basePath": "/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/promos": {
      "get": {
        "summary": "Fetches promos",
        "description": "Returns a list of available promos. The reponse includes the display\nname and other details about each promo.\n\n- Including the `branch_id` query parameter will only return promos that belong to the given\nbranch\n\n- The `expand` query parameter supports:\n  - `branches`: will append the branches where the promo is being published\n",
        "tags": [
          "promos"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/BranchId"
          },
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of promos matching given parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Promo"
              }
            }
          },
          "401": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Some given entity was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new promo",
        "description": "Given a set of properties, creates and returns a promo\n",
        "tags": [
          "promos"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Promo with properties to be created with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created promo",
            "schema": {
              "$ref": "#/definitions/Promo"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Promo couldn't be created with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/promos/{id}": {
      "get": {
        "summary": "Fetches a promo",
        "description": "With a promo id, fetches it and its related information.\n\n- The `expand` query parameter supports:\n  - `branches`: will append the branches where the promo is being published\n",
        "tags": [
          "promos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The promo identifier",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "Found promo information",
            "schema": {
              "$ref": "#/definitions/Promo"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given promo was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates a promo",
        "description": "With a promo id, updates on it the given properties\n",
        "tags": [
          "promos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The promo identifier",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Promo properties to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated promo",
            "schema": {
              "$ref": "#/definitions/Promo"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given promo was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Promo couldn't be updated with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a promo",
        "description": "Deletes the specified promo, by id\n",
        "tags": [
          "promos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the promo to be deleted",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted promo"
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given promo was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/stores": {
      "get": {
        "summary": "Fetches stores",
        "description": "Returns a list of available stores. The reponse includes the display\nname and other details about each store\n\n- The `expand` query parameter supports:\n  - `branches`: will append the branches that belong to the store\n",
        "tags": [
          "stores"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of stores",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            }
          },
          "401": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new store",
        "description": "Given a set of properties, creates and returns a store\n",
        "tags": [
          "stores"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Store with properties to be created with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created store",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Store couldn't be created with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/stores/{id}": {
      "get": {
        "summary": "Fetches a store",
        "description": "With a store id, fetches it and its related information.\n\n- The `expand` query parameter supports:\n  - `branches`: will append the branches that belong to the store\n",
        "tags": [
          "stores"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The store identifier",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "Found store information",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given store was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates a store",
        "description": "With a store id, updates on it the given properties\n",
        "tags": [
          "stores"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The store identifier",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Store properties to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StoreParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated store",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given store was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Store couldn't be updated with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a store",
        "description": "Deletes the specified store, by id\n",
        "tags": [
          "stores"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the store to be deleted",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted store"
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given store was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auths/index": {
      "get": {
        "summary": "Fetches all application users",
        "description": "Returns a list of all registered application users\n",
        "tags": [
          "auths"
        ],
        "responses": {
          "200": {
            "description": "An array of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auths/login": {
      "post": {
        "summary": "Logs in an application user",
        "description": "Given an user email and password, it authenticates the user with the given credentials,\nreturning an access token for subsequent requests\n",
        "tags": [
          "auths"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User credentials to authenticate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/UserLoginResponse"
            }
          },
          "401": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/auths/register": {
      "post": {
        "summary": "Registers in an application user",
        "description": "Given a set of parameters, it creates an application user, returning the successfully\ncreated user\n",
        "tags": [
          "auths"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User information to be registered with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegisterParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully registered",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized to register an user",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Some field is unprocessable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admins/index": {
      "get": {
        "summary": "Fetches all web admins",
        "description": "Returns a list of all registered web admins\n",
        "tags": [
          "admins"
        ],
        "responses": {
          "200": {
            "description": "An array of admins",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Admin"
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admins/login": {
      "post": {
        "summary": "Logs in a web admin",
        "description": "Given an admin email and password, it authenticates the admin with the given credentials,\nreturning an access token for subsequent requests\n",
        "tags": [
          "admins"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Admins credentials to authenticate",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "schema": {
              "$ref": "#/definitions/AdminLoginResponse"
            }
          },
          "401": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/admins/register": {
      "post": {
        "summary": "Registers in a web admin",
        "description": "Given a set of parameters, it creates a web admin, returning the successfully\ncreated admin\n",
        "tags": [
          "admins"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Admin information to be registered with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminRegisterParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully registered",
            "schema": {
              "$ref": "#/definitions/Admin"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized to register an admin",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Some field is unprocessable",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/branches": {
      "get": {
        "summary": "Fetches all branches",
        "description": "Returns a list of all created branches.\n\n- Including both `latitude` and `longitude` query parameters will fetch only\nbranches that are located at most 3 km far from the given location\n\n- Including the `store_id` query parameter will only return branches that belong to the given\nstore\n\n- The `expand` query parameter supports:\n  - `store`: will append the store the branch belongs to\n  - `promos`: will append promos that are being published in the branch\n",
        "tags": [
          "branches"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/Latitude"
          },
          {
            "$ref": "#/parameters/Longitude"
          },
          {
            "$ref": "#/parameters/StoreId"
          },
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of branches matching given parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Branch"
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new branch",
        "description": "Given a set of properties, creates and returns a branch\n",
        "tags": [
          "branches"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Branch with properties to be created with",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BranchParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created branch",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "401": {
            "description": "Unauthorized error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Branch couldn't be created with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/branches/{id}": {
      "get": {
        "summary": "Fetches a branch",
        "description": "With a branch id, fetches it and its related information\n\n- The `expand` query parameter supports:\n  - `store`: will append the store the branch belongs to\n  - `promos`: will append promos that are being published in the branch\n",
        "tags": [
          "branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The branch identifier",
            "type": "string",
            "required": true
          },
          {
            "$ref": "#/parameters/Expand"
          }
        ],
        "responses": {
          "200": {
            "description": "Found branch information",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given branch was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates a branch",
        "description": "With a branch id, updates on it the given properties\n",
        "tags": [
          "branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The branch identifier",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Branch properties to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BranchParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated branch",
            "schema": {
              "$ref": "#/definitions/Branch"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given branch was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Branch couldn't be updated with the given properties",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a branch",
        "description": "Deletes the specified branch, by id\n",
        "tags": [
          "branches"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the branch to be deleted",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted branch"
          },
          "401": {
            "description": "Unauthorized error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given branch was not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "promos",
      "description": "Promos management"
    },
    {
      "name": "stores",
      "description": "Stores management"
    },
    {
      "name": "auths",
      "description": "Authorizations management"
    },
    {
      "name": "admins",
      "description": "Admins management"
    },
    {
      "name": "branches",
      "description": "Branches management"
    }
  ],
  "parameters": {
    "StoreId": {
      "name": "store_id",
      "in": "query",
      "description": "In order to filter results or find specific results by the given store id",
      "type": "string"
    },
    "BranchId": {
      "name": "branch_id",
      "in": "query",
      "description": "In order to filter results or find specific results by the given branch id",
      "type": "string"
    },
    "Latitude": {
      "name": "latitude",
      "in": "query",
      "description": "User's location latitude",
      "type": "number",
      "format": "double"
    },
    "Longitude": {
      "name": "longitude",
      "in": "query",
      "description": "User's location longitude",
      "type": "number",
      "format": "double"
    },
    "Expand": {
      "name": "expand",
      "in": "query",
      "description": "In order to embed the entities specified in this param. (comma-separated)",
      "type": "string"
    }
  },
  "definitions": {
    "Promo": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "terms",
        "stock",
        "price",
        "start_date",
        "end_date",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing an specific promo"
        },
        "name": {
          "type": "string",
          "description": "Display name for the promo"
        },
        "description": {
          "type": "string",
          "description": "A description of the promo, it may contain specific information about it"
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions related with the promo"
        },
        "stock": {
          "type": "integer",
          "description": "Indicates how many items of the promo are available"
        },
        "price": {
          "type": "number",
          "description": "Indicates what is the sale price for an item related with the promo"
        },
        "start_date": {
          "type": "string",
          "description": "Date and time when the promo starts to run"
        },
        "end_date": {
          "type": "string",
          "description": "Date and time when the promo finishes"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when this instance was created"
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when this instance was last modified"
        }
      }
    },
    "PromoParams": {
      "type": "object",
      "required": [
        "name",
        "description",
        "terms"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name for the promo"
        },
        "description": {
          "type": "string",
          "description": "A description of the promo, it may contain specific information about it"
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions related with the promo"
        },
        "stock": {
          "type": "integer",
          "description": "Indicates how many items of the promo are available"
        },
        "price": {
          "type": "number",
          "description": "Indicates what is the sale price for an item related with the promo"
        },
        "start_date": {
          "type": "string",
          "description": "Date and time when the promo starts to run"
        },
        "end_date": {
          "type": "string",
          "description": "Date and time when the promo finishes"
        }
      }
    },
    "Store": {
      "type": "object",
      "required": [
        "id",
        "name",
        "description",
        "nit",
        "website",
        "address",
        "status",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing an specific store"
        },
        "name": {
          "type": "string",
          "description": "Display name for the store"
        },
        "description": {
          "type": "string",
          "description": "A description of the store, it may contain specific information about it"
        },
        "nit": {
          "type": "string",
          "description": "Unique business and social registry, given by commercial entity"
        },
        "website": {
          "type": "string",
          "description": "Website of the store."
        },
        "address": {
          "type": "string",
          "description": "Headquarters street address, if there is one"
        },
        "status": {
          "type": "string",
          "description": "Current status of the store",
          "enum": [
            "pending_documentation",
            "active",
            "closed",
            "denied",
            "blocked"
          ]
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when this instance was created"
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when this instance was last modified"
        }
      }
    },
    "StoreParams": {
      "type": "object",
      "required": [
        "name",
        "description",
        "nit"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name for the store"
        },
        "description": {
          "type": "string",
          "description": "A description of the store, it may contain specific information about it"
        },
        "nit": {
          "type": "string",
          "description": "Unique business and social registry, given by commercial entity"
        },
        "website": {
          "type": "string",
          "description": "Website of the store. `null` if there is no website"
        },
        "address": {
          "type": "string",
          "description": "Headquarters street address. `null` if no address"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "first_name",
        "last_name",
        "email",
        "birthday",
        "gender",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing an specific user"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the user"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the user"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "birthday": {
          "type": "string",
          "description": "Day of birth of the user. **(Format: YYYY-MM-dd)**"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the user",
          "enum": [
            "M",
            "F"
          ]
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when the user was created"
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when the user was lastly modified"
        }
      }
    },
    "LoginParams": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the user or user to be authenticated"
        },
        "password": {
          "type": "string",
          "description": "Password associated with the given email address"
        }
      }
    },
    "UserLoginResponse": {
      "type": "object",
      "required": [
        "user_id",
        "token"
      ],
      "properties": {
        "user_id": {
          "type": "string",
          "description": "Identifier of the authenticated user"
        },
        "token": {
          "type": "string",
          "description": "Authorization token for subsequent requests"
        }
      }
    },
    "UserRegisterParams": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First given name of the user"
        },
        "last_name": {
          "type": "string",
          "description": "Last given name of the user"
        },
        "email": {
          "type": "string",
          "description": "Email address to register the user with. **(Used to login)**"
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "Password to register the user with"
        },
        "birthday": {
          "type": "string",
          "description": "Date of birth of the user"
        },
        "gender": {
          "type": "string",
          "description": "Gender of the user",
          "enum": [
            "M",
            "F"
          ]
        }
      }
    },
    "Admin": {
      "type": "object",
      "required": [
        "id",
        "first_name",
        "last_name",
        "email",
        "admin_type",
        "privileges",
        "activated_at",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing an specific admin"
        },
        "first_name": {
          "type": "string",
          "description": "First name of the admin"
        },
        "last_name": {
          "type": "string",
          "description": "Last name of the admin"
        },
        "email": {
          "type": "string",
          "description": "Email address of the admin"
        },
        "admin_type": {
          "type": "string",
          "description": "Type of administrator",
          "enum": [
            "branch_admin",
            "store_admin"
          ]
        },
        "privileges": {
          "type": "array",
          "description": "Privileges of the admin",
          "items": {
            "type": "string"
          },
          "enum": [
            "create_promo",
            "update_promo",
            "delete_promo",
            "update_branch",
            "invite_to_branch"
          ]
        },
        "activated_at": {
          "type": "string",
          "description": "Date and time when the admin was activated via email confirmation, `null` if he/she hasn't confirmed the email yet"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when the admin was created"
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when the admin was lastly modified"
        }
      }
    },
    "AdminLoginResponse": {
      "type": "object",
      "required": [
        "admin_id",
        "token"
      ],
      "properties": {
        "admin_id": {
          "type": "string",
          "description": "Identifier of the authenticated admin"
        },
        "token": {
          "type": "string",
          "description": "Authorization token for subsequent requests"
        }
      }
    },
    "AdminRegisterParams": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ],
      "properties": {
        "first_name": {
          "type": "string",
          "description": "First given name of the admin"
        },
        "last_name": {
          "type": "string",
          "description": "Last given name of the admin"
        },
        "email": {
          "type": "string",
          "description": "Email address to register the admin with. **(Used to login)**"
        },
        "password": {
          "type": "string",
          "format": "password",
          "description": "Password to register the admin with"
        },
        "privileges": {
          "type": "array",
          "description": "Array of privileges the admin to be created with",
          "items": {
            "type": "string"
          },
          "enum": [
            "create_promo",
            "update_promo",
            "delete_promo",
            "update_branch",
            "invite_to_branch"
          ]
        }
      }
    },
    "Branch": {
      "type": "object",
      "required": [
        "id",
        "name",
        "latitude",
        "longitude",
        "address",
        "default_contact_info",
        "store_id",
        "created_at",
        "updated_at"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representing an specific branch"
        },
        "name": {
          "type": "string",
          "description": "Associated name with the branch"
        },
        "latitude": {
          "type": "string",
          "description": "Latitude of the branch"
        },
        "longitude": {
          "type": "string",
          "description": "Longitude of the branch"
        },
        "address": {
          "type": "string",
          "description": "Street address of the branch"
        },
        "default_contact_info": {
          "type": "boolean",
          "description": "`true` if should use the store contact information, `false` if should use particular contact information for this branch"
        },
        "store_id": {
          "type": "string",
          "description": "Unique identifier representing the store this branch belongs to"
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when the branch was created"
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when the branch was lastly modified"
        }
      }
    },
    "BranchParams": {
      "type": "object",
      "required": [
        "name",
        "latitude",
        "longitude",
        "address",
        "store_id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name for the branch"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude of the branch for georeferencing purposes"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude of the branch for georeferencing purposes"
        },
        "address": {
          "type": "string",
          "description": "Indicates how many items of the promo are available"
        },
        "default_contact_info": {
          "type": "boolean",
          "description": "`true` to use the store contact information, `false` to use particular contact information for this branch"
        },
        "store_id": {
          "type": "string",
          "description": "Unique identifier representing the store that will own this branch"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}
