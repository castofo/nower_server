{
  "swagger": "2.0",
  "info": {
    "title": "Nower REST API",
    "description": "Specification for exposed Nower services.",
    "version": "1.0"
  },
  "schemes": [
    "http"
  ],
  "basePath": "/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/promos": {
      "get": {
        "summary": "Fetches all Promos.",
        "description": "Returns a list of available promos. The reponse includes the display\nname and other details about each promo.\n",
        "tags": [
          "Promos"
        ],
        "responses": {
          "200": {
            "description": "An array of promos.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Promo"
              }
            }
          },
          "401": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates a new Promo.",
        "description": "Given a set of properties, creates and returns a promo.\n",
        "tags": [
          "Promos"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Promo with properties to be created with.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created promo.",
            "schema": {
              "$ref": "#/definitions/Promo"
            }
          },
          "401": {
            "description": "Unauthorized error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Promo couldn't be created with the given properties.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/promos/{id}": {
      "patch": {
        "summary": "Updates a Promo.",
        "description": "With a promo id, updates on it the given properties.\n",
        "tags": [
          "Promos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The promo identifier",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "body",
            "description": "Promo properties to be updated.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoParams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated promo.",
            "schema": {
              "$ref": "#/definitions/Promo"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given promo was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "422": {
            "description": "Promo couldn't be updated with the given properties.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes a Promo.",
        "description": "Deletes the specified promo, by id.\n",
        "tags": [
          "Promos"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Identifier of the promo to be deleted.",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted promo."
          },
          "401": {
            "description": "Unauthorized error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The given promo was not found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Promo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier representg an specific promo."
        },
        "name": {
          "type": "string",
          "description": "Display name for the promo."
        },
        "description": {
          "type": "string",
          "description": "A description of the promo, it may contain specific information about it."
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions related with the promo."
        },
        "stock": {
          "type": "integer",
          "description": "Indicates how many items of the promo are available."
        },
        "price": {
          "type": "number",
          "description": "Indicates what is the sale price for an item related with the promo."
        },
        "start_date": {
          "type": "string",
          "description": "Date and time when the promo starts to run."
        },
        "end_date": {
          "type": "string",
          "description": "Date and time when the promo finishes."
        },
        "created_at": {
          "type": "string",
          "description": "Date and time when this instance was created."
        },
        "updated_at": {
          "type": "string",
          "description": "Date and time when this instance was last modified."
        }
      }
    },
    "PromoParams": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name for the promo."
        },
        "description": {
          "type": "string",
          "description": "A description of the promo, it may contain specific information about it."
        },
        "terms": {
          "type": "string",
          "description": "Terms and conditions related with the promo."
        },
        "stock": {
          "type": "integer",
          "description": "Indicates how many items of the promo are available."
        },
        "price": {
          "type": "number",
          "description": "Indicates what is the sale price for an item related with the promo."
        },
        "start_date": {
          "type": "string",
          "description": "Date and time when the promo starts to run."
        },
        "end_date": {
          "type": "string",
          "description": "Date and time when the promo finishes."
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}